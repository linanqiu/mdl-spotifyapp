var async = require('async');
var moment = require('moment');

var SpotifyWorker = function(useWrapper, limit) {
	this.useWrapper = useWrapper;
	if (limit) {
		this.limit = limit;
	} else {
		this.limit = 5;
	}
}

SpotifyWorker.prototype.getLatestAlbum = function(query, callback) {

	if (this.useWrapper) {
		this.getLatestAlbumWrapper(query, callback);
	} else {
		this.getLatestAlbumHomebrew(query, callback);
	}
}

SpotifyWorker.prototype.getLatestAlbumWrapper = function(query, callback) {
	var limit = this.limit;

	var SpotifyWebApi = require('spotify-web-api-node');
	var spotifyApi = new SpotifyWebApi();
	spotifyApi.searchArtists(query).then(function(data) {

		var artists = [];
		for (var i = 0; i < Math.min(limit, data['artists']['items'].length); i++) {
			artists.push(data['artists']['items'][i]);
		}

		async.map(artists, function(artist, asyncCallback) {
			spotifyApi.getArtistAlbums(artist['id']).then(function(data) {
				var albums = data['items'];
				var ids = albums.map(function(album) {
					return album['id'];
				});

				spotifyApi.getAlbums(ids).then(function(data) {

					var albums = data['albums'];
					var latestDate = parseDate(albums[0]['release_date'], albums[0]['release_date_precision']).valueOf();
					var latestAlbum = albums[0];

					for (var i = 0; i < albums.length; i++) {
						var date = moment(albums[i]['release_date'], "YYYY-MM-DD").valueOf();
						if (date > latestDate) {
							latestDate = date;
							latestAlbum = albums[i];
						}
					}

					asyncCallback(false, latestAlbum);
				}, function(err) {
					asyncCallback(true, null);
				});

			}, function(err) {
				console.log(err);
				asyncCallback(true, null);
			});
		}, function(err, result) {
			if (err) {
				callback(true, null);
			} else {
				callback(false, result);
			}
		});

	}, function(err) {
		callback(true, null);
	});
}

function parseDate(releaseDate, precision) {
	if (precision == 'day') {
		return moment(releaseDate, "YYYY-MM-DD");
	} else if (precision == 'month') {
		return moment(releaseDate, 'YYYY-MM');
	} else {
		return moment(releaseDate, ' YYYY');
	}
}

SpotifyWorker.prototype.getLatestAlbumHomebrew = function(query, callback) {
	var request = require('request');
	var ARTIST_SEARCH_URL = "https://api.spotify.com/v1/search?q=ARTIST&type=artist&limit=" + this.limit;
	var ARTIST_ALBUM_URL = "https://api.spotify.com/v1/artists/ARTIST_ID/albums";
	var ALBUM_SEARCH_URL = "https://api.spotify.com/v1/albums?ids=ALBUM_IDS";
	var limit = this.limit;

	request(ARTIST_SEARCH_URL.replace("ARTIST", query), function(err, resp, body) {
		if (err) {
			console.log(err);
			callback(true, null);
		} else {
			var data = JSON.parse(body);

			var artists = [];
			for (var i = 0; i < Math.min(limit, data['artists']['items'].length); i++) {
				artists.push(data['artists']['items'][i]);
			}

			async.map(artists, function(artist, asyncCallback) {
				var artistId = artist['id'];
				request(ARTIST_ALBUM_URL.replace('ARTIST_ID', artistId), function(err, resp, body) {
					if (err) {
						console.log(err);
						asyncCallback(true, null);
					}
					var data = JSON.parse(body);
					var albums = data['items'];
					var ids = albums.map(function(album) {
						return album['id'];
					});

					request(ALBUM_SEARCH_URL.replace('ALBUM_IDS', ids.join(',')), function(err, resp, body) {
						if (err) {
							console.log(err);
							asyncCallback(true, null);
						} else {
							var data = JSON.parse(body);
							var albums = data['albums'];
							var latestDate = parseDate(albums[0]['release_date'], albums[0]['release_date_precision']).valueOf();
							var latestAlbum = albums[0];

							for (var i = 0; i < albums.length; i++) {
								var date = moment(albums[i]['release_date'], "YYYY-MM-DD").valueOf();
								if (date > latestDate) {
									latestDate = date;
									latestAlbum = albums[i];
								}
							}

							asyncCallback(false, latestAlbum);
						}
					});

				});
			}, function(err, result) {
				if (err) {
					callback(true, null);
				} else {
					callback(false, result);
				}
			});

		}
	});
}

module.exports = SpotifyWorker;